{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "167c9eb2-5c05-4cb1-8adf-264bef0c34c4",
   "metadata": {},
   "source": [
    "Quetion1 ->  Explain why we have to use the Exception class while creating a Custom Exception.\n",
    "\n",
    "Solution ->  Python throws errors and exceptions whenever code behaves abnormally & its execution stop abruptly. Python provides us tools to handle                such scenarios by the help of exception handling method using try-except statements. Some standard exceptions which are found are include              ArithmeticError, AssertionError, AttributeError, ImportError, etc.\n",
    "             Defining Custom Exceptions\n",
    "             In Python, we can define custom exceptions by creating a new class that is derived from the built-in Exception class.\n",
    "             Python provides a lot of built-in exception classes that outputs an error when something in your code goes wrong. The error classes can                also be used to handle those specific exceptions using try-except blocks.\n",
    "syntex ->            \n",
    "class CustomError(Exception):\n",
    "    ...\n",
    "    pass\n",
    "\n",
    "try:\n",
    "   ...\n",
    "\n",
    "except CustomError:\n",
    "    ...\n",
    "    \n",
    "    \n",
    "    \n",
    "Quetion2 -> Write a python program to print Python Exception Hierarchy?\n",
    "\n",
    "Solution -> \n",
    "def classtree(cls, indent=0):\n",
    "    print ('.' * indent, cls.__name__)\n",
    "    for subcls in cls.__subclasses__():\n",
    "        classtree(subcls, indent + 3)\n",
    "\n",
    "classtree(BaseException)\n",
    "\n",
    "output ->\n",
    "\n",
    "BaseException\n",
    "... Exception\n",
    "...... StandardError\n",
    "......... TypeError\n",
    "......... ImportError\n",
    "............ ZipImportError\n",
    "......... EnvironmentError\n",
    "............ IOError\n",
    "............... ItimerError\n",
    "............ OSError\n",
    "......... EOFError\n",
    "......... RuntimeError\n",
    "............ NotImplementedError\n",
    "......... NameError\n",
    "............ UnboundLocalError\n",
    "......... AttributeError\n",
    "......... SyntaxError\n",
    "............ IndentationError\n",
    "............... TabError\n",
    "......... LookupError\n",
    "............ IndexError\n",
    "............ KeyError\n",
    "............ CodecRegistryError\n",
    "......... ValueError\n",
    "............ UnicodeError\n",
    "............... UnicodeEncodeError\n",
    "............... UnicodeDecodeError\n",
    "............... UnicodeTranslateError\n",
    "......... AssertionError\n",
    "......... ArithmeticError\n",
    "............ FloatingPointError\n",
    "............ OverflowError\n",
    "............ ZeroDivisionError\n",
    "......... SystemError\n",
    "............ CodecRegistryError\n",
    "......... ReferenceError\n",
    "......... MemoryError\n",
    "......... BufferError\n",
    "...... StopIteration\n",
    "...... Warning\n",
    "......... UserWarning\n",
    "......... DeprecationWarning\n",
    "......... PendingDeprecationWarning\n",
    "......... SyntaxWarning\n",
    "......... RuntimeWarning\n",
    "......... FutureWarning\n",
    "......... ImportWarning\n",
    "......... UnicodeWarning\n",
    "......... BytesWarning\n",
    "...... _OptionError\n",
    "... GeneratorExit\n",
    "... SystemExit\n",
    "... KeyboardInterrupt\n",
    "\n",
    "\n",
    "\n",
    "Question3 ->  What errors are defined in the ArithmeticError class? Explain any two with an example.\n",
    "\n",
    "Solution ->  ArithmeticError is simply an error that occurs during numeric calculations.\n",
    "\n",
    "ArithmeticError types in Python include:\n",
    "\n",
    "OverFlowError\n",
    "ZeroDivisionError\n",
    "FloatingPointError\n",
    "These errors are all capable of crashing a code in Python. It is essential to catch an error because you do not want your code to crash as a result of incorrect input from you or a user.\n",
    "\n",
    "Example ->\n",
    "try :\n",
    "    a = 10/0\n",
    "except ZeroDivisionError as e:\n",
    "    print(\"i am trying to handle a zerodivision error\",e)\n",
    "    \n",
    "    \n",
    "Example ->  \n",
    "n = 8\n",
    "try: \n",
    "    for i in range(1,100):\n",
    "         n = n ** i\n",
    "except OverflowError as e:\n",
    "    print('Its an Overflow error, please check.')\n",
    " \n",
    " \n",
    " \n",
    " \n",
    "Question4 -> Why LookupError class is used? Explain with an example KeyError and IndexError.\n",
    "\n",
    "Solution ->  The LookupError exception in Python forms the base class for all exceptions that are raised when an index or a key is not found                for a sequence or dictionary respectively.\n",
    "             You can use LookupError exception class to handle both IndexError and KeyError exception classes.\n",
    "             LookupError Exception is the Base class for errors raised when something can’t be found. The base class for the exceptions that                are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.\n",
    "\n",
    "Example ->\n",
    "try:\n",
    "    l = [1,2,3,4]\n",
    "    print(l[6])\n",
    "except IndexError as e:\n",
    "    print(e)\n",
    "    \n",
    "Example ->\n",
    "try:\n",
    "    d = {\"key\":\"aditya\",1 : [2,3,4,5]}\n",
    "    print(d[\"key2\"])\n",
    "except KeyError as e:\n",
    "    print(e)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "Question5 -> Explain ImportError. What is ModuleNotFoundError?    \n",
    "    \n",
    "Solution ->  Module imports can certainly frustrate people and especially those who are fairly new to Python. Since I keep seeing relevant                questions on StackOverflow on a daily basis, I decided to write an article here on Medium to try and describe how import works              behind the scenes and what approach you need to follow in order to do your life easier. \n",
    "\n",
    "A python module is a single file with a .py extension.\n",
    "A python package is a folder that contains at least one python module. For python2, a package requires a __init__.py file\n",
    "A python package can contain any number of nested sub-packages, i.e. packages that contain other packages down the hierarchy of the project structure.\n",
    "imports are useful when a module needs to use some piece of functionality (e.g. a function or a class) written in another module (of the same or a different package or sub-package)\n",
    "The “module not found” error occurs in Python when a script tries to import a module that the interpreter cannot find. This means that the module the script is trying to import is not installed on the system, not in the same directory as the script, or not in a directory listed in the system’s PYTHONPATH environment variable.\n",
    "\n",
    "\n",
    "\n",
    "Question6 -> List down some best practices for exception handling in python.\n",
    "\n",
    "Solution ->  Adding extensive error handling is crucial when developing maintainable and robust code. Errors can fall into several                        categories: logical errors, generated errors, compile-time errors, and runtime errors. In this article, we’ll focus on handling              runtime errors — errors that occur while a program is running.\n",
    "\n",
    "(1) Prevents program from crashing if an error occurs\n",
    "If an error occurs in a program, we don’t want the program to unexpectedly crash on the user. Instead, error handling can be used to notify the user of why the error occurred and gracefully exit the process that caused the error.\n",
    "(2) Saves time debugging errors\n",
    "Following reason #1, having the program display an error instead of immediately crashing will save a lot of time when debugging errors.\n",
    "The logic inside the error handler can be updated to display useful information for the developer, such as the code trackback, type of error, etc.\n",
    "(3) Helps define requirements for the program\n",
    "If the program crashes due to bad input, the error handler could notify the user of why the error occurred and define the requirements and constraints of the program."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
